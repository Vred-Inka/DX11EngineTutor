#include "Model.h"
<<<<<<< Updated upstream
=======
#include "GeometryGenerator.h"
>>>>>>> Stashed changes
#include <assimp/Importer.hpp>

bool Model::Initialize(ID3D11Device * device, ID3D11DeviceContext * deviceContext, ID3D11ShaderResourceView * texture, ConstantBuffer<CB_VS_vertexshader>& cb_vs_vertexshader)
{
    Assimp::Importer importer;
    this->device = device;
    this->deviceContext = deviceContext;
    this->texture = texture;
    this->cb_vs_vertexshader = &cb_vs_vertexshader;

  

    try
    {
        //Textured Square
        Vertex v[] =
        {
            Vertex(-0.5f,  -0.5f, -0.5f, 0.0f, 1.0f), //FRONT Bottom Left   - [0]
            Vertex(-0.5f,   0.5f, -0.5f, 0.0f, 0.0f), //FRONT Top Left      - [1]
            Vertex(0.5f,   0.5f, -0.5f, 1.0f, 0.0f), //FRONT Top Right     - [2]
            Vertex(0.5f,  -0.5f, -0.5f, 1.0f, 1.0f), //FRONT Bottom Right   - [3]
            Vertex(-0.5f,  -0.5f, 0.5f, 0.0f, 1.0f), //BACK Bottom Left   - [4]
            Vertex(-0.5f,   0.5f, 0.5f, 0.0f, 0.0f), //BACK Top Left      - [5]
            Vertex(0.5f,   0.5f, 0.5f, 1.0f, 0.0f), //BACK Top Right     - [6]
            Vertex(0.5f,  -0.5f, 0.5f, 1.0f, 1.0f), //BACK Bottom Right   - [7]
        };

        //Load Vertex Data
        HRESULT hr = this->vertexBuffer.Initialize(this->device, v, ARRAYSIZE(v));
        COM_ERROR_IF_FAILED(hr, "Failed to initialize vertex buffer.");

        DWORD indices[] =
        {
            0, 1, 2, //FRONT
            0, 2, 3, //FRONT
            4, 7, 6, //BACK 
            4, 6, 5, //BACK
            3, 2, 6, //RIGHT SIDE
            3, 6, 7, //RIGHT SIDE
            4, 5, 1, //LEFT SIDE
            4, 1, 0, //LEFT SIDE
            1, 5, 6, //TOP
            1, 6, 2, //TOP
            0, 3, 7, //BOTTOM
            0, 7, 4, //BOTTOM
        };

        //Load Index Data
        hr = this->indexBuffer.Initialize(this->device, indices, ARRAYSIZE(indices));
        COM_ERROR_IF_FAILED(hr, "Failed to initialize index buffer.");
    }
    catch (COMException & exception)
    {
        ErrorLogger::Log(exception);
        return false;
    }

    this->SetPosition(0.0f, 0.0f, 0.0f);
    this->SetRotation(0.0f, 0.0f, 0.0f);
    this->UpdateWorldMatrix();
    return true;
}

void Model::SetTexture(ID3D11ShaderResourceView * texture)
{
    this->texture = texture;
}

void Model::Draw(const XMMATRIX & viewProjectionMatrix)
{
    //Update Constant buffer with WVP Matrix
    this->cb_vs_vertexshader->data.mat = this->worldMatrix * viewProjectionMatrix; //Calculate World-View-Projection Matrix
    this->cb_vs_vertexshader->data.mat = XMMatrixTranspose(this->cb_vs_vertexshader->data.mat);
    this->cb_vs_vertexshader->ApplyChanges();
    this->deviceContext->VSSetConstantBuffers(0, 1, this->cb_vs_vertexshader->GetAddressOf());

    this->deviceContext->PSSetShaderResources(0, 1, &this->texture); //Set Texture
    this->deviceContext->IASetIndexBuffer(this->indexBuffer.Get(), DXGI_FORMAT::DXGI_FORMAT_R32_UINT, 0);
    UINT offset = 0;
    this->deviceContext->IASetVertexBuffers(0, 1, this->vertexBuffer.GetAddressOf(), this->vertexBuffer.StridePtr(), &offset);
    this->deviceContext->DrawIndexed(this->indexBuffer.BufferSize(), 0, 0); //Draw
}

void Model::UpdateWorldMatrix()
{
    this->worldMatrix = XMMatrixRotationRollPitchYaw(mRot.x, mRot.y, mRot.z) * XMMatrixTranslation(mPos.x, mPos.y, mPos.z);

    XMMATRIX vecRotationMatrix = XMMatrixRotationRollPitchYaw(0.0f, this->mRot.y, 0.0f);
    this->vec_forward = XMVector3TransformCoord(this->DEFAULT_FORWARD_VECTOR, vecRotationMatrix);
    this->vec_backward = XMVector3TransformCoord(this->DEFAULT_BACKWARD_VECTOR, vecRotationMatrix);
    this->vec_left = XMVector3TransformCoord(this->DEFAULT_LEFT_VECTOR, vecRotationMatrix);
    this->vec_right = XMVector3TransformCoord(this->DEFAULT_RIGHT_VECTOR, vecRotationMatrix);
}

const XMVECTOR & Model::GetPositionVector() const
{
    return this->mPosVector;
}

const XMFLOAT3 & Model::GetPositionFloat3() const
{
    return this->mPos;
}

const XMVECTOR & Model::GetRotationVector() const
{
    return this->mRotVector;
}

const XMFLOAT3 & Model::GetRottionFloat3() const
{
    return this->mRot;
}

void Model::SetPosition(const XMVECTOR & pos)
{
    XMStoreFloat3(&this->mPos, pos);
    this->mPosVector = pos;
    UpdateWorldMatrix();
}

void Model::SetPosition(const XMFLOAT3 & pos)
{
    this->mPos = pos;
    this->mPosVector = XMLoadFloat3(&this->mPos);
    UpdateWorldMatrix();
}

void Model::SetPosition(float x, float y, float z)
{
    this->mPos = XMFLOAT3(x, y, z);
    this->mPosVector = XMLoadFloat3(&this->mPos);
    UpdateWorldMatrix();
}

void Model::AdjustPosition(const XMVECTOR & pos)
{
    this->mPosVector += pos;
    XMStoreFloat3(&this->mPos, this->mPosVector);
    UpdateWorldMatrix();
}

void Model::AdjustPosition(const XMFLOAT3 & pos)
{
    this->mPos.x += pos.x;
    this->mPos.y += pos.y;
    this->mPos.z += pos.z;
    this->mPosVector = XMLoadFloat3(&this->mPos);
    UpdateWorldMatrix();
}

void Model::AdjustPosition(float x, float y, float z)
{
    this->mPos.x += x;
    this->mPos.y += y;
    this->mPos.z += z;
    this->mPosVector = XMLoadFloat3(&this->mPos);
    UpdateWorldMatrix();
}

void Model::SetRotation(const XMVECTOR & rot)
{
    XMStoreFloat3(&this->mRot, rot);
    this->mRotVector = rot;
    UpdateWorldMatrix();
}

void Model::SetRotation(const XMFLOAT3 & rot)
{
    this->mRot = rot;
    this->mRotVector = XMLoadFloat3(&this->mRot);
    UpdateWorldMatrix();
}

void Model::SetRotation(float x, float y, float z)
{
    this->mRot = XMFLOAT3(x, y, z);
    this->mRotVector = XMLoadFloat3(&this->mRot);
    UpdateWorldMatrix();
}

void Model::AdjustRotation(const XMVECTOR & rot)
{
    this->mRotVector += rot;
    XMStoreFloat3(&this->mRot, this->mRotVector);
    UpdateWorldMatrix();
}

void Model::AdjustRotation(const XMFLOAT3 & rot)
{
    this->mRot.x += rot.x;
    this->mRot.y += rot.y;
    this->mRot.z += rot.z;
    this->mRotVector = XMLoadFloat3(&this->mRot);
    UpdateWorldMatrix();
}

void Model::AdjustRotation(float x, float y, float z)
{
    this->mRot.x += x;
    this->mRot.y += y;
    this->mRot.z += z;
    this->mRotVector = XMLoadFloat3(&this->mRot);
    UpdateWorldMatrix();
}

void Model::SetLookAtPos(XMFLOAT3 lookAtPos)
{
    if (lookAtPos.x == this->mPos.x && lookAtPos.y == this->mPos.y && lookAtPos.z == this->mPos.z)
    {
        return;
    }

    lookAtPos.x = this->mPos.x - lookAtPos.x;
    lookAtPos.y = this->mPos.y - lookAtPos.y;
    lookAtPos.z = this->mPos.z - lookAtPos.z;

    float pitch = 0.0f;
    if (lookAtPos.y != 0.0f)
    {
        const float distance = sqrt(lookAtPos.x * lookAtPos.x * lookAtPos.z *lookAtPos.z);
        pitch = atan(lookAtPos.y / distance);
    }

    float yaw = 0.0f;
    if (lookAtPos.x != 0.0f)
    {
        yaw = atan(lookAtPos.x / lookAtPos.z);
    }

    if (lookAtPos.z > 0)
    {
        yaw += XM_PI;
    }

    this->SetRotation(pitch, yaw, 0.0f);
}

const XMVECTOR & Model::GetForwardVector()
{
    return this->vec_forward;
}

const XMVECTOR & Model::GetRightVector()
{
    return this->vec_right;
}

const XMVECTOR & Model::GetLeftVector()
{
    return this->vec_left;
}

const XMVECTOR & Model::GetBackwardVector()
{
    return this->vec_backward;
}
